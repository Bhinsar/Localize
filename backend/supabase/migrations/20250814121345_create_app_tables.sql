-- Required for location-based queries. You only need to run this once.
CREATE EXTENSION IF NOT EXISTS postgis;

-- Create a TABLE IF NOT EXISTS for public user profiles
CREATE TABLE IF NOT EXISTS  public.profiles (
  id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  full_name TEXT,
  avatar_url TEXT,
  role TEXT NOT NULL DEFAULT 'client',
  phone_number TEXT UNIQUE
);
-- Comment on the profiles TABLE IF NOT EXISTS
COMMENT ON TABLE  public.profiles IS 'User profile information linked to authentication.';

-- Create a TABLE IF NOT EXISTS for services
CREATE TABLE IF NOT EXISTS public.services (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  category TEXT
);
COMMENT ON TABLE  public.services IS 'List of available services like Plumbing, Tutoring, etc.';

-- Create a TABLE IF NOT EXISTS for provider-specific details
CREATE TABLE IF NOT EXISTS public.provider_details (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid NOT NULL UNIQUE REFERENCES public.profiles(id) ON DELETE CASCADE,
  service_id BIGINT REFERENCES public.services(id) ON DELETE SET NULL,
  bio TEXT NOT NULL,
  price NUMERIC NOT NULL,
  price_unit TEXT NOT NULL DEFAULT 'hour' CHECK (price_unit IN ('hour', 'liter', 'month')),
  availability_schedule JSONB,
  location GEOMETRY(Point, 4326),
  status TEXT NOT NULL DEFAULT 'active'
);
COMMENT ON TABLE  public.provider_details IS 'Details specific to users who are service providers.';

-- Create a TABLE IF NOT EXISTS for bookings
CREATE TABLE IF NOT EXISTS public.bookings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  provider_id BIGINT REFERENCES public.provider_details(id) ON DELETE SET NULL,
  client_id uuid REFERENCES public.profiles(id) ON DELETE SET NULL,
  service_id BIGINT REFERENCES public.services(id) ON DELETE SET NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  location GEOMETRY(Point, 4326),
  scheduled_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT now()
);
COMMENT ON TABLE  public.bookings IS 'Records of service bookings between clients and providers.';

-- Create a TABLE IF NOT EXISTS for reviews
CREATE TABLE IF NOT EXISTS public.reviews (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  booking_id BIGINT NOT NULL UNIQUE REFERENCES public.bookings(id) ON DELETE CASCADE,
  rating INT NOT NULL CHECK (rating >= 1 AND rating <= 5),
  comment TEXT,
  created_at TIMESTAMPTZ DEFAULT now()
);
COMMENT ON TABLE  public.reviews IS 'Reviews for completed bookings.';

-- Create a TABLE IF NOT EXISTS for real-time chat messages
CREATE TABLE IF NOT EXISTS public.chat_messages (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  booking_id BIGINT NOT NULL REFERENCES public.bookings(id) ON DELETE CASCADE,
  sender_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  message TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now()
);
COMMENT ON TABLE  public.chat_messages IS 'Messages for the chat feature within a booking.';

CREATE TABLE IF NOT EXISTS public.user_subscription(
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  provider_id BIGINT NOT NULL REFERENCES public.provider_details(id) ON DELETE CASCADE,
  user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT now()
);

CREATE TABLE IF NOT EXISTS public.delivery(
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_subscription_id BIGINT NOT NULL REFERENCES public.user_subscription(id) ON DELETE CASCADE,
  status TEXT NOT NULL DEFAULT 'pending',
  delivery_date DATE NOT NULL,
  UNIQUE (user_subscription_id, delivery_date)
);